/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Chess;

import java.awt.Color;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import static java.lang.Math.abs;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ja
 */
public class ChessMainFrame extends javax.swing.JFrame {
//static variable for player which will be visible in all other classess

    static MyPlayer p1;
    static MyPlayer p2;
    static DefaultTableModel model;

    /**
     * Creates new form ChessMainFrame
     */
    public ChessMainFrame() {
        initComponents();
        jLabelVisibitilty(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new MyPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Player", "Figure", "From", "To"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));
        jPanel3.setPreferredSize(new java.awt.Dimension(286, 80));

        jButton2.setText("Start game");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Save game");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Load game");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 51));
        jLabel2.setText("Check!");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, java.awt.BorderLayout.SOUTH);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel1.setText("Game movements");
        jPanel1.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 551, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 492, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanel2);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        p1 = new MyPlayer(Color.WHITE, "Player1", 1);
        p2 = new MyPlayer(Color.BLACK, "Player2", 2);
        MyPanel p = (MyPanel) jPanel2;
        model = (DefaultTableModel) jTable1.getModel();
        clearRowsMovTab();
        jLabelVisibitilty(0);
        p.repaint();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            //save button for the current state of game - saving p1 and p2
            FileOutputStream fos = new FileOutputStream("plik.txt"); //establishing new file
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(p1);
            oos.writeObject(p2);
            oos.close();
            fos.close();
        } catch (Exception ex) {
            Logger.getLogger(ChessMainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            FileInputStream fis = new FileInputStream("plik.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            p1 = (MyPlayer) ois.readObject();
            p2 = (MyPlayer) ois.readObject();
            MyPanel p = (MyPanel) jPanel2; //read data to MyPanel
            model = (DefaultTableModel) jTable1.getModel();
            clearRowsMovTab();
            jLabelVisibitilty(0);
            
            for (int i = 0; i < p1.getTab().size(); i++) {
                if (p1.getTab().get(i).getType()=="King") {
                    p1.setKingX(p1.getTab().get(i).getX());
                    p1.setKingY(p1.getTab().get(i).getY());
                }
            }
            for (int i = 0; i < p2.getTab().size(); i++) {
                if (p2.getTab().get(i).getType()=="King") {
                    p2.setKingX(p2.getTab().get(i).getX());
                    p2.setKingY(p2.getTab().get(i).getY());
                }
            }
            
            p.repaint(); //repaint MyPanel after loading the data
        } catch (Exception ex) {
            Logger.getLogger(ChessMainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChessMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChessMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChessMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChessMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChessMainFrame().setVisible(true);
            }
        });
    }

    public static MyChessman isOccupied(int cx, int cy) { //function which returns figure if field is occupied based on the location
        MyChessman figure = null;
        if (ChessMainFrame.p1 != null) {
            //location we should divide by the b and check in the player container there is figure with such location
            //check if we clicked if the field on which we clicked is assigned to the one of the objects (figures) of the player
            for (int i = 0; i < ChessMainFrame.p1.getTab().size(); i++) {
                if ((ChessMainFrame.p1.getTab().get(i).getX() == cx) && (ChessMainFrame.p1.getTab().get(i).getY() == cy)) {
                    figure = ChessMainFrame.p1.getTab().get(i); //if in container of figures there is object which have same location as click then assigned as ch
                }
            }
        }
        if (ChessMainFrame.p2 != null) {
            //location we should divide by the b and check in the player container there is figure with such location
            //check if we clicked if the field on which we clicked is assigned to the one of the objects (figures) of the player
            for (int i = 0; i < ChessMainFrame.p2.getTab().size(); i++) {
                if ((ChessMainFrame.p2.getTab().get(i).getX() == cx) && (ChessMainFrame.p2.getTab().get(i).getY() == cy)) {
                    figure = ChessMainFrame.p2.getTab().get(i); //if in container of figures there is object which have same location as click then assigned as ch
                }
            }
        }
        return figure;
    }

    private void clearRowsMovTab() {
        System.out.println("getRowCount=" + model.getRowCount());

        if (model.getRowCount() > 0) {
            while (model.getRowCount() != 0) {
                model.removeRow(0);
            }
        }
    }

    public static boolean bishopCheck(int x, int y, int a, int b) {
        if ((abs(x - a) == 1 && abs(y - b) == 1)
                || //two field distance
                (isOccupied(x - 1, y - 1) == null && (x - a) == 2 && (y - b) == 2)
                || (isOccupied(x + 1, y - 1) == null && (x - a) == -2 && (y - b) == 2)
                || (isOccupied(x - 1, y + 1) == null && (x - a) == 2 && (y - b) == -2)
                || (isOccupied(x + 1, y + 1) == null && (x - a) == -2 && (y - b) == -2)
                || //three field distance
                (isOccupied(x - 1, y - 1) == null && isOccupied(x - 2, y - 2) == null && (x - a) == 3 && (y - b) == 3)
                || (isOccupied(x + 1, y - 1) == null && isOccupied(x + 2, y - 2) == null && (x - a) == -3 && (y - b) == 3)
                || (isOccupied(x - 1, y + 1) == null && isOccupied(x - 2, y + 2) == null && (x - a) == 3 && (y - b) == -3)
                || (isOccupied(x + 1, y + 1) == null && isOccupied(x + 2, y + 2) == null && (x - a) == -3 && (y - b) == -3)
                ||//four field distance
                (isOccupied(x - 1, y - 1) == null && isOccupied(x - 2, y - 2) == null && isOccupied(x - 3, y - 3) == null && (x - a) == 4 && (y - b) == 4)
                || (isOccupied(x + 1, y - 1) == null && isOccupied(x + 2, y - 2) == null && isOccupied(x + 3, y - 3) == null && (x - a) == -4 && (y - b) == 4)
                || (isOccupied(x - 1, y + 1) == null && isOccupied(x - 2, y + 2) == null && isOccupied(x - 3, y + 3) == null && (x - a) == 4 && (y - b) == -4)
                || (isOccupied(x + 1, y + 1) == null && isOccupied(x + 2, y + 2) == null && isOccupied(x + 3, y + 3) == null && (x - a) == -4 && (y - b) == -4)
                ||//five fields distance
                (isOccupied(x - 1, y - 1) == null && isOccupied(x - 2, y - 2) == null && isOccupied(x - 3, y - 3) == null && isOccupied(x - 4, y - 4) == null && (x - a) == 5 && (y - b) == 5)
                || (isOccupied(x + 1, y - 1) == null && isOccupied(x + 2, y - 2) == null && isOccupied(x + 3, y - 3) == null && isOccupied(x + 4, y - 4) == null && (x - a) == -5 && (y - b) == 5)
                || (isOccupied(x - 1, y + 1) == null && isOccupied(x - 2, y + 2) == null && isOccupied(x - 3, y + 3) == null && isOccupied(x - 4, y + 4) == null && (x - a) == 5 && (y - b) == -5)
                || (isOccupied(x + 1, y + 1) == null && isOccupied(x + 2, y + 2) == null && isOccupied(x + 3, y + 3) == null && isOccupied(x + 4, y + 4) == null && (x - a) == -5 && (y - b) == -5)
                ||//six fields distance
                (isOccupied(x - 1, y - 1) == null && isOccupied(x - 2, y - 2) == null && isOccupied(x - 3, y - 3) == null && isOccupied(x - 4, y - 4) == null && isOccupied(x - 5, y - 5) == null && (x - a) == 6 && (y - b) == 6)
                || (isOccupied(x + 1, y - 1) == null && isOccupied(x + 2, y - 2) == null && isOccupied(x + 3, y - 3) == null && isOccupied(x + 4, y - 4) == null && isOccupied(x + 5, y - 5) == null && (x - a) == -6 && (y - b) == 6)
                || (isOccupied(x - 1, y + 1) == null && isOccupied(x - 2, y + 2) == null && isOccupied(x - 3, y + 3) == null && isOccupied(x - 4, y + 4) == null && isOccupied(x - 5, y + 5) == null && (x - a) == 6 && (y - b) == -6)
                || (isOccupied(x + 1, y + 1) == null && isOccupied(x + 2, y + 2) == null && isOccupied(x + 3, y + 3) == null && isOccupied(x + 4, y + 4) == null && isOccupied(x + 5, y + 5) == null && (x - a) == -6 && (y - b) == -6)
                ||//seven fields distance
                (isOccupied(x - 1, y - 1) == null && isOccupied(x - 2, y - 2) == null && isOccupied(x - 3, y - 3) == null && isOccupied(x - 4, y - 4) == null && isOccupied(x - 5, y - 5) == null && isOccupied(x - 6, y - 6) == null && (x - a) == 7 && (y - b) == 7)
                || (isOccupied(x + 1, y - 1) == null && isOccupied(x + 2, y - 2) == null && isOccupied(x + 3, y - 3) == null && isOccupied(x + 4, y - 4) == null && isOccupied(x + 5, y - 5) == null && isOccupied(x + 6, y - 6) == null && (x - a) == -7 && (y - b) == 7)
                || (isOccupied(x - 1, y + 1) == null && isOccupied(x - 2, y + 2) == null && isOccupied(x - 3, y + 3) == null && isOccupied(x - 4, y + 4) == null && isOccupied(x - 5, y + 5) == null && isOccupied(x - 6, y + 6) == null && (x - a) == 7 && (y - b) == -7)
                || (isOccupied(x + 1, y + 1) == null && isOccupied(x + 2, y + 2) == null && isOccupied(x + 3, y + 3) == null && isOccupied(x + 4, y + 4) == null && isOccupied(x + 5, y + 5) == null && isOccupied(x + 6, y + 6) == null && (x - a) == -7 && (y - b) == -7)) {
            return true;
        } else {
            return false;
        }
    }

    public static boolean rookCheck(int x, int y, int a, int b) {
        if (x != a && y != b) {
            return false;
        } else {
            if (x == a
                    && ((abs(y - b) == 1)
                    //two fields distance
                    || ((isOccupied(x, y + 1) == null && (y - b) == -2) || (isOccupied(x, y - 1) == null && (y - b) == 2))
                    //three fields distance
                    || ((isOccupied(x, y + 1) == null && isOccupied(x, y + 2) == null && (y - b) == -3) || (isOccupied(x, y - 1) == null && isOccupied(x, y - 2) == null && (y - b) == 3))
                    //four fields distance
                    || ((isOccupied(x, y + 1) == null && isOccupied(x, y + 2) == null && isOccupied(x, y + 3) == null && (y - b) == -4) || (isOccupied(x, y - 1) == null && isOccupied(x, y - 2) == null && isOccupied(x, y - 3) == null && (y - b) == 4))
                    //five fields distance
                    || ((isOccupied(x, y + 1) == null && isOccupied(x, y + 2) == null && isOccupied(x, y + 3) == null && isOccupied(x, y + 4) == null && (y - b) == -5) || (isOccupied(x, y - 1) == null && isOccupied(x, y - 2) == null && isOccupied(x, y - 3) == null && isOccupied(x, y - 4) == null && (y - b) == 5))
                    //six fields distance
                    || ((isOccupied(x, y + 1) == null && isOccupied(x, y + 2) == null && isOccupied(x, y + 3) == null && isOccupied(x, y + 4) == null && isOccupied(x, y + 5) == null && (y - b) == -6) || (isOccupied(x, y - 1) == null && isOccupied(x, y - 2) == null && isOccupied(x, y - 3) == null && isOccupied(x, y - 4) == null && isOccupied(x, y - 5) == null && (y - b) == 6))
                    //seven fields distance
                    || ((isOccupied(x, y + 1) == null && isOccupied(x, y + 2) == null && isOccupied(x, y + 3) == null && isOccupied(x, y + 4) == null && isOccupied(x, y + 5) == null && isOccupied(x, y + 6) == null && (y - b) == -7) || (isOccupied(x, y - 1) == null && isOccupied(x, y - 2) == null && isOccupied(x, y - 3) == null && isOccupied(x, y - 4) == null && isOccupied(x, y - 5) == null && isOccupied(x, y - 6) == null && (y - b) == 7)))) {
                return true;
            }
            if (y == b
                    && ((abs(x - a) == 1)
                    //two fields distance
                    || ((isOccupied(x + 1, y) == null && (x - a) == -2) || (isOccupied(x - 1, y) == null && (x - a) == 2))
                    //three fields distance
                    || ((isOccupied(x + 1, y) == null && isOccupied(x + 2, y) == null && (x - a) == -3) || (isOccupied(x - 1, y) == null && isOccupied(x - 2, y) == null && (x - a) == 3))
                    //four fields distance
                    || ((isOccupied(x + 1, y) == null && isOccupied(x + 2, y) == null && isOccupied(x + 3, y) == null && (x - a) == -4) || (isOccupied(x - 1, y) == null && isOccupied(x - 2, y) == null && isOccupied(x - 3, y) == null && (x - a) == 4))
                    //five fields distance
                    || ((isOccupied(x + 1, y) == null && isOccupied(x + 2, y) == null && isOccupied(x + 3, y) == null && isOccupied(x + 4, y) == null && (x - a) == -5) || (isOccupied(x - 1, y) == null && isOccupied(x - 2, y) == null && isOccupied(x - 3, y) == null && isOccupied(x - 4, y) == null && (x - a) == 5))
                    //six fields distance
                    || ((isOccupied(x + 1, y) == null && isOccupied(x + 2, y) == null && isOccupied(x + 3, y) == null && isOccupied(x + 4, y) == null && isOccupied(x + 5, y) == null && (x - a) == -6) || (isOccupied(x - 1, y) == null && isOccupied(x - 2, y) == null && isOccupied(x - 3, y) == null && isOccupied(x - 4, y) == null && isOccupied(x - 5, y) == null && (x - a) == 6))
                    //seven fields distance
                    || ((isOccupied(x + 1, y) == null && isOccupied(x + 2, y) == null && isOccupied(x + 3, y) == null && isOccupied(x + 4, y) == null && isOccupied(x + 5, y) == null && isOccupied(x + 6, y) == null && (x - a) == -7) || (isOccupied(x - 1, y) == null && isOccupied(x - 2, y) == null && isOccupied(x - 3, y) == null && isOccupied(x - 4, y) == null && isOccupied(x - 5, y) == null && isOccupied(x - 6, y) == null && (x - a) == 7)))) {
                return true;
            }
        }
        return false;
    }

    public static boolean isCheckWhiteKing(int kingX, int kingY) {
        int x = kingX;
        int y = kingY;
        int isCheck = 0;
        int knight1X = -1;
        int knight1Y = -1;
        int knight2X = -1;
        int knight2Y = -1;
        int bishop1X = -1;
        int bishop1Y = -1;
        int bishop2X = -1;
        int bishop2Y = -1;
        int rook1X = -1;
        int rook1Y = -1;
        int rook2X = -1;
        int rook2Y = -1;
        int Queen1X = -1;
        int Queen1Y = -1;
        
        for (int i = 0; i < ChessMainFrame.p2.getTab().size(); i++) {
            if (ChessMainFrame.p2.getTab().get(i).getType() == "Knight 1") {
                knight1X = ChessMainFrame.p2.getTab().get(i).getX();
                knight1Y = ChessMainFrame.p2.getTab().get(i).getY();
            }
            if (ChessMainFrame.p2.getTab().get(i).getType() == "Knight 2") {
                knight2X = ChessMainFrame.p2.getTab().get(i).getX();
                knight2Y = ChessMainFrame.p2.getTab().get(i).getY();
            }
            if (ChessMainFrame.p2.getTab().get(i).getType() == "Bishop 1") {
                bishop1X = ChessMainFrame.p2.getTab().get(i).getX();
                bishop1Y = ChessMainFrame.p2.getTab().get(i).getY();
            }
            if (ChessMainFrame.p2.getTab().get(i).getType() == "Bishop 2") {
                bishop2X = ChessMainFrame.p2.getTab().get(i).getX();
                bishop2Y = ChessMainFrame.p2.getTab().get(i).getY();
            }
            if (ChessMainFrame.p2.getTab().get(i).getType() == "Rook 1") {
                rook1X = ChessMainFrame.p2.getTab().get(i).getX();
                rook1Y = ChessMainFrame.p2.getTab().get(i).getY();
            }
            if (ChessMainFrame.p2.getTab().get(i).getType() == "Rook 2") {
                rook2X = ChessMainFrame.p2.getTab().get(i).getX();
                rook2Y = ChessMainFrame.p2.getTab().get(i).getY();
            }
            if (ChessMainFrame.p2.getTab().get(i).getType() == "Queen") {
                Queen1X = ChessMainFrame.p2.getTab().get(i).getX();
                Queen1Y = ChessMainFrame.p2.getTab().get(i).getY();
            }
        }
        
        //Pawn one up and left and Pawn one up and left
        if ((isOccupied(x - 1, y - 1) != null && isOccupied(x - 1, y - 1).getType().contains("Pawn") == true && isOccupied(x - 1, y - 1).getPlayerNum() == 2) || (isOccupied(x + 1, y - 1) != null && isOccupied(x + 1, y - 1).getType().contains("Pawn") == true && isOccupied(x + 1, y - 1).getPlayerNum() == 2)) {
            return true;
        }
        //Knight
        //assignment of location of knight
        //check if knight is in distance of ~1 for x and ~2 for y or opposite
        if (knight1X > 0) {
            if ((abs(x - knight1X) == 1 && abs(y - knight1Y) == 2) || (abs(x - knight1X) == 2 && abs(y - knight1Y) == 1)) {
                isCheck = 1;
            }
        }
        if (knight2X > 0) {
            if ((abs(x - knight2X) == 1 && abs(y - knight2Y) == 2) || (abs(x - knight2X) == 2 && abs(y - knight2Y) == 1)) {
                isCheck = 1;
            }
        }
        //Bishop
        //assignment of location of bishop
        if (bishop1X > 0 && bishopCheck(x, y, bishop1X, bishop1Y) == true) {
            isCheck = 1;
        }
        if (bishop2X > 0 && bishopCheck(x, y, bishop2X, bishop2Y) == true) {
            isCheck = 1;
        }
        //Rook
        if (rook1X > 0 && rookCheck(x, y, rook1X, rook1Y) == true) {
            isCheck = 1;
        }
        if (rook2X > 0 && rookCheck(x, y, rook2X, rook2Y) == true) {
            isCheck = 1;
        }

        //Queen
        if (Queen1X > 0 && (bishopCheck(x, y, Queen1X, Queen1Y) == true || rookCheck(x, y, Queen1X, Queen1Y) == true)) {
            isCheck = 1;
        }

//final return
        if (isCheck == 1) {
            return true;
        } else {
            return false;
        }
    }

    public static boolean isCheckBlackKing(int kingX, int kingY) {
        int x = kingX;
        int y = kingY;
        int isCheck = 0;
        int knight1X = -1;
        int knight1Y = -1;
        int knight2X = -1;
        int knight2Y = -1;
        int bishop1X = -1;
        int bishop1Y = -1;
        int bishop2X = -1;
        int bishop2Y = -1;
        int rook1X = -1;
        int rook1Y = -1;
        int rook2X = -1;
        int rook2Y = -1;
        int Queen1X = -1;
        int Queen1Y = -1;

        for (int i = 0; i < ChessMainFrame.p1.getTab().size(); i++) {
            if (ChessMainFrame.p1.getTab().get(i).getType() == "Knight 1") {
                knight1X = ChessMainFrame.p1.getTab().get(i).getX();
                knight1Y = ChessMainFrame.p1.getTab().get(i).getY();
            }
            if (ChessMainFrame.p1.getTab().get(i).getType() == "Knight 2") {
                knight2X = ChessMainFrame.p1.getTab().get(i).getX();
                knight2Y = ChessMainFrame.p1.getTab().get(i).getY();
            }
            if (ChessMainFrame.p2.getTab().get(i).getType() == "Bishop 1") {
                bishop1X = ChessMainFrame.p1.getTab().get(i).getX();
                bishop1Y = ChessMainFrame.p1.getTab().get(i).getY();
            }
            if (ChessMainFrame.p1.getTab().get(i).getType() == "Bishop 2") {
                bishop2X = ChessMainFrame.p1.getTab().get(i).getX();
                bishop2Y = ChessMainFrame.p1.getTab().get(i).getY();
            }
            if (ChessMainFrame.p1.getTab().get(i).getType() == "Rook 1") {
                rook1X = ChessMainFrame.p1.getTab().get(i).getX();
                rook1Y = ChessMainFrame.p1.getTab().get(i).getY();
            }
            if (ChessMainFrame.p1.getTab().get(i).getType() == "Rook 2") {
                rook2X = ChessMainFrame.p1.getTab().get(i).getX();
                rook2Y = ChessMainFrame.p1.getTab().get(i).getY();
            }
            if (ChessMainFrame.p1.getTab().get(i).getType() == "Queen") {
                Queen1X = ChessMainFrame.p1.getTab().get(i).getX();
                Queen1Y = ChessMainFrame.p1.getTab().get(i).getY();
            }
        }
        //Pawn one up and left and Pawn one up and left
        if ((isOccupied(x - 1, y - 1) != null && isOccupied(x - 1, y - 1).getType().contains("Pawn") == true && isOccupied(x - 1, y - 1).getPlayerNum() == 2) || (isOccupied(x + 1, y - 1) != null && isOccupied(x + 1, y - 1).getType().contains("Pawn") == true && isOccupied(x + 1, y - 1).getPlayerNum() == 2)) {
            return true;
        }
        //Knight
        //assignment of location of knight

        //check if knight is in distance of ~1 for x and ~2 for y or opposite
        if (knight1X > 0) {
            if ((abs(x - knight1X) == 1 && abs(y - knight1Y) == 2) || (abs(x - knight1X) == 2 && abs(y - knight1Y) == 1)) {
                isCheck = 1;
            }
        }
        if (knight2X > 0) {
            if ((abs(x - knight2X) == 1 && abs(y - knight2Y) == 2) || (abs(x - knight2X) == 2 && abs(y - knight2Y) == 1)) {
                isCheck = 1;
            }
        }
        //Bishop
        if (bishop1X > 0 && bishopCheck(x, y, bishop1X, bishop1Y) == true) {
            isCheck = 1;
        }
        if (bishop2X > 0 && bishopCheck(x, y, bishop2X, bishop2Y) == true) {
            isCheck = 1;
        }
        //Rook
        if (rook1X > 0 && rookCheck(x, y, rook1X, rook1Y) == true) {
            isCheck = 1;
        }
        if (rook2X > 0 && rookCheck(x, y, rook2X, rook2Y) == true) {
            isCheck = 1;
        }

        //Queen
        if (Queen1X > 0 && (bishopCheck(x, y, Queen1X, Queen1Y) == true || rookCheck(x, y, Queen1X, Queen1Y) == true)) {
            isCheck = 1;
        }
        
        //final return
        if (isCheck == 1) {
            return true;
        } else {
            return false;
        }
    }
    
    public static void jLabelVisibitilty(int a){
        if (a == 1) {
            jLabel2.setVisible(true);
        } else {
            jLabel2.setVisible(false);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    public static javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
